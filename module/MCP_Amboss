"""
Simplified AMBOSS MCP client for Karina (no UI).

Purpose
-------
- Call only the AMBOSS MCP tool `search_article_sections` via JSON-RPC.
- Return the raw JSON payload (no text rendering).
- Store both input payload and result in `st.session_state`.

Usage
-----
from mcp_amboss_module_for_karina import call_amboss_search

data = call_amboss_search(query="Ileitis terminalis")
"""

from __future__ import annotations
import json
from typing import Optional, Dict, Any
import requests
import streamlit as st

AMBOSS_URL: str = "https://content-mcp.de.production.amboss.com/mcp"


def _build_payload(query: str, *, language: str = "de") -> Dict[str, Any]:
    return {
        "jsonrpc": "2.0",
        "id": "1",
        "method": "tools/call",
        "params": {
            "name": "search_article_sections",
            "arguments": {"query": query, "language": language},
        },
    }


def _try_parse_json(s: str) -> Optional[dict]:
    try:
        return json.loads(s)
    except Exception:
        return None


def _parse_response(resp: requests.Response) -> dict:
    ctype = resp.headers.get("Content-Type", "")
    if "application/json" in ctype:
        return resp.json()

    # Handle SSE (Server-Sent Events)
    payload = "".join(
        line.strip()[len("data:"):].strip()
        for line in resp.text.splitlines()
        if line.strip().startswith("data:")
    )
    parsed = _try_parse_json(payload)
    if parsed is None:
        raise ValueError("Konnte SSE-JSON nicht extrahieren.")
    return parsed


def call_amboss_search(
    *,
    query: str,
    token: Optional[str] = None,
    url: str = AMBOSS_URL,
    timeout: float = 30.0,
    language: str = "de",
    extra_headers: Optional[Dict[str, str]] = None,
) -> dict:
    """Call AMBOSS MCP `search_article_sections` and return raw JSON result.

    Automatically loads the token from `st.secrets["AMBOSS_TOKEN"]` if not provided.
    Stores the request payload in `st.session_state["amboss_input_mcp"]`.
    """
    token = token or st.secrets.get("AMBOSS_TOKEN")
    if not token:
        raise ValueError("AMBOSS_TOKEN not found. Please set in st.secrets or pass as argument.")

    payload = _build_payload(query, language=language)
    st.session_state["amboss_input_mcp"] = payload

    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json",
        "Accept": "application/json, text/event-stream",
    }
    if extra_headers:
        headers.update(extra_headers)

    resp = requests.post(url, headers=headers, data=json.dumps(payload), timeout=timeout)
    resp.raise_for_status()
    result = _parse_response(resp)

    st.session_state["amboss_result"] = result
    return result


if __name__ == "__main__":
    import os, argparse, json

    parser = argparse.ArgumentParser(description="Call AMBOSS MCP search_article_sections.")
    parser.add_argument("query", help="Search query.")
    parser.add_argument("--token", default=os.environ.get("AMBOSS_TOKEN"), help="AMBOSS Bearer token")
    parser.add_argument("--language", default="de", help="Language parameter for MCP")
    args = parser.parse_args()

    result = call_amboss_search(query=args.query, token=args.token, language=args.language)
    print(json.dumps(result, ensure_ascii=False, indent=2))
